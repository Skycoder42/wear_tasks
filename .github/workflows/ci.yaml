name: CI/CD for wear_tasks

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  ci:
    name: CI
    uses: Skycoder42/dart_test_tools/.github/workflows/flutter.yml@main
    with:
      unitTestPaths: ""
      buildRunner: true

  release:
    name: CD / Create release if needed
    needs:
      - ci
    runs-on: ubuntu-latest
    steps:
      - name: Install Dart-SDK (stable)
        uses: dart-lang/setup-dart@v1
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
      - id: version
        name: Check if a release should be created
        run: |
          set -eo pipefail
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          git fetch --tags > /dev/null
          tag_exists=$(git tag -l "v$package_version")

          if [[ -z "$tag_exists" ]]; then
            echo Release does not exist yet - creating release
            echo "update=true" >> $GITHUB_OUTPUT
            echo "version=$package_version" >> $GITHUB_OUTPUT
          else
            echo Release already exists - skipping creation
            echo "update=false" >> $GITHUB_OUTPUT
          fi
      - name: Activate cider
        if: steps.version.outputs.update == 'true'
        run: dart pub global activate cider
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="v$package_version"
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

          release_name="Release of package $package_name - Version $package_version"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

          version_changelog_file=$(mktemp)
          echo "# Changelog" > $version_changelog_file
          dart pub global run cider describe "$package_version" >> $version_changelog_file
          echo "" >> $version_changelog_file
          echo "body_path=$version_changelog_file" >> $GITHUB_OUTPUT
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}

  build:
    name: CD / Build app
    needs:
      - release
    if: ${{ needs.release.outputs.releaseCreated }}
    runs-on: ubuntu-latest
    environment: google-play
    outputs:
      buildNumber: ${{ steps.generateBuildNumber.outputs.buildNumber }}
    steps:
      - name: Install JDK Version 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Install Flutter-SDK
        uses: subosito/flutter-action@v2
        with:
          cache: true
      - name: Download flutter binary artifacts
        run: flutter precache --universal --android
      - name: Validate flutter setup
        run: flutter doctor -v
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Restore dart packages
        run: flutter pub get
      - name: Create build files
        run: flutter pub run build_runner build
      - id: generateBuildNumber
        name: Generate build number
        run: dart run tool/generate_build_number.dart
      - name: Generate Changelog
        run: |
          set -eo pipefail

          changelogs_dir=build/app/outputs/metadata/en-US/changelogs
          mkdir -p "$changelogs_dir"

          dart run cider describe '${{ needs.release.outputs.releaseVersion }}' > "$changelogs_dir/${{ steps.generateBuildNumber.outputs.buildNumber }}.txt"
      - name: Prepare signing keystore
        run: tool/prepare_keystore.sh create
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      - name: Build android app bundle
        run: >-
          flutter build appbundle
          --release
          --build-number=${{ steps.generateBuildNumber.outputs.buildNumber }}
          --obfuscate --split-debug-info=build/app/outputs/debug-info
          --dart-define=SENTRY_DSN=${{ secrets.SENTRY_DSN }}
      - name: Upload app and debug info
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: build/app/outputs
          retention-days: 1
          if-no-files-found: error
      - name: Delete keystore and properties
        if: always()
        continue-on-error: true
        run: tool/prepare_keystore.sh delete

  deploy:
    name: CD / Publish app
    needs:
      - release
      - build
    if: ${{ needs.release.outputs.releaseCreated }}
    runs-on: macos-latest
    environment: google-play
    steps:
      - name: Install Flutter-SDK
        uses: subosito/flutter-action@v2
        with:
          cache: true
      - name: Install fastlane
        run: brew install fastlane
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-app
          path: build
      - name: Restore dart packages
        run: flutter pub get
      - name: Prepare Google Play key
        run: echo '${{ secrets.GOOGLE_PLAY_KEY }}' > "$RUNNER_TEMP/fastlane-key-file.json"
      - name: Deploy to Google Play
        run: >-
          fastlane upload_to_play_store
          --json_key "$RUNNER_TEMP/fastlane-key-file.json"
          --package_name de.skycoder42.wearTasks
          --track wear:internal
          --release_status completed
          --aab build/bundle/release/app-release.aab
          --mapping build/mapping/release/mapping.txt
          --metadata_path build/metadata
      - name: Upload debug symbols
        run: flutter pub run sentry_dart_plugin
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DIST: ${{ needs.build.outputs.buildNumber }}
      - name: Delete Google Play key
        if: always()
        run: rm -f "$RUNNER_TEMP/fastlane-key-file.json"
